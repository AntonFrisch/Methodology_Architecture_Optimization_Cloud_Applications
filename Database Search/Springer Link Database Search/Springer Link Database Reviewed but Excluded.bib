@Inbook{Chauhan2017,
author="Chauhan, Muhammad Aufeef
and Probst, Christian W.",
editor="Ramachandran, Muthu
and Mahmood, Zaigham",
title="Architecturally Significant Requirements Identification, Classification and Change Management for Multi-tenant Cloud-Based Systems",
bookTitle="Requirements Engineering for Service and Cloud Computing",
year="2017",
publisher="Springer International Publishing",
address="Cham",
pages="181--205",
abstract="Involvement of numerous stakeholders in cloud-based systems' design and usage with varying degrees of nonfunctional requirements makes Architecturally Significant Requirements (ASRs) identification and management a challenge undertaking. The aim of the research presented in this chapter is to identify different types of design-time and run-time ASRs of the cloud-based systems, provide an ASRs classification scheme and present a framework to manage the requirements' variability during life cycle of the cloud-based systems. We have used a multifaceted research approach to address the ASRs identification, classification, and change management challenges. We have explored findings from systematic as well as structured reviews of the literature on quality requirements of the cloud-based systems including but not limited to security, availability, scalability, privacy, and multi-tenancy. We have presented a framework for requirements classification and change management focusing on distributed Platform as a Service (PaaS) and Software as a Service (SaaS) systems as well as complex software ecosystems that are built using PaaS and SaaS, such as Tools as a Service (TaaS). We have demonstrated applicability of the framework on a selected set of the requirements for the cloud-based systems. The results of the research presented in this chapter show that key quality requirements of the cloud-based systems, for example, multi-tenancy and security, have a significant impact on how other quality requirements (such as scalability, reliability, and interoperability) are handled in the overall architecture design of a cloud-based system. It is important to distinguish tenant-specific run-time architecturally significant quality requirements and corresponding cloud-based systems' components so that run-time status of the tenant-specific architecture quality requirements can be monitored and system configurations can be adjusted accordingly. For the systems that can be used by multiple tenants, the requirements change management framework should consider if the addition or modification (triggered by a specific tenant) of a quality requirement can impact quality requirements of other tenants, and whether or not a trade-off point should be introduced in the architecture (corresponding to the requirements). The trade-off point can also be referred as a variability point, that is, a compromise has to be made among the number of quality requirements and only some of the requirements can be satisfied. System analysts and software architects can use the proposed taxonomy and the management framework for identifying relevant quality requirements for multi-tenant cloud-based systems, for analyzing impact of changes in the requirements on the overall system architecture, and for managing variability of the architecturally significant requirements.",
isbn="978-3-319-51310-2",
doi="10.1007/978-3-319-51310-2_8",
url="https://doi.org/10.1007/978-3-319-51310-2_8"
}
@article{huber_modeling_2014,
	title = {Modeling run-time adaptation at the system architecture level in dynamic service-oriented environments},
	volume = {8},
	issn = {1863-2394},
	url = {https://doi.org/10.1007/s11761-013-0144-4},
	doi = {10.1007/s11761-013-0144-4},
	abstract = {Today, software systems are more and more executed in dynamic, virtualized environments. These environments host diverse applications of different parties, sharing the underlying resources. The goal of this resource sharing is to utilize resources efficiently while ensuring that quality-of-service requirements are continuously satisfied. In such scenarios, complex adaptations to changes in the system environment are still largely performed manually by humans. Over the past decade, autonomic self-adaptation techniques aiming to minimize human intervention have become increasingly popular. However, given that adaptation processes are usually highly system-specific, it is a challenge to abstract from system details, enabling the reuse of adaptation strategies. In this paper, we present S/T/A, a modeling language to describe system adaptation processes at the system architecture level in a generic, human-understandable and reusable way. We apply our approach to multiple different realistic contexts (dynamic resource allocation, run-time adaptation planning, etc.). The results show how a holistic model-based approach can close the gap between complex manual adaptations and their autonomous execution.},
	number = {1},
	journal = {Service Oriented Computing and Applications},
	author = {Huber, Nikolaus and van Hoorn, Andr√© and Koziolek, Anne and Brosig, Fabian and Kounev, Samuel},
	month = mar,
	year = {2014},
	pages = {73--89},
}

@InProceedings{10.1007/978-3-319-44482-6_12,
author="Gysel, Michael
and K{\"o}lbener, Lukas
and Giersche, Wolfgang
and Zimmermann, Olaf",
editor="Aiello, Marco
and Johnsen, Einar Broch
and Dustdar, Schahram
and Georgievski, Ilche",
title="Service Cutter: A Systematic Approach to Service Decomposition",
booktitle="Service-Oriented and Cloud Computing",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="185--200",
abstract="Decomposing a software system into smaller parts always has been a challenge in software engineering. It is particularly important to split distributed systems into loosely coupled and highly cohesive units. Service-oriented architectures and their microservices deployments tackle many related problems, but remain vague on how to cut a system into discrete, autonomous, network-accessible services. In this paper, we propose a structured, repeatable approach to service decomposition based on 16 coupling criteria distilled from the literature and industry experience. These coupling criteria form the base of Service Cutter, our method and tool framework for service decomposition. In the Service Cutter approach, coupling information is extracted from software engineering artifacts such as domain models and use cases and represented as an undirected, weighted graph to find and score densely connected clusters. The resulting candidate service cuts promise to reduce coupling between and promote high cohesion within services. In our validation activities, which included prototyping, action research and case studies, we successfully decomposed two sample applications with acceptable performance; most (but not all) test scenarios resulted in appropriate service cuts. These results as well as early feedback from members of the target audience in industry and academia suggest that our coupling criteria catalog and tool-supported service decomposition approach have the potential to assist a service architect's design decisions in a viable and practical manner.",
isbn="978-3-319-44482-6"
}


@InProceedings{10.1007/978-3-030-58923-3_2,
author="Chondamrongkul, Nacha
and Sun, Jing
and Warren, Ian",
editor="Jansen, Anton
and Malavolta, Ivano
and Muccini, Henry
and Ozkaya, Ipek
and Zimmermann, Olaf",
title="Formal Software Architectural Migration Towards Emerging Architectural Styles",
booktitle="Software Architecture",
year="2020",
publisher="Springer International Publishing",
address="Cham",
pages="21--38",
abstract="Software systems are evolved over time to enhance various qualities of the software system by adopting new technologies and principles. The architecture design is usually required to be migrated from one architectural style to another to support this adoption, while the key functionalities still need to be preserved. This paper presents a formal approach that supports architectural migration. Our approach automates refactoring the architectural design to support the exploitation of emerging technologies such as microservices and blockchain. With our approach, the refactored architectural design can be verified to ensure that the essential functional requirements are still preserved, and the design has complied with the behavioural constraints of new architectural styles. We have evaluated the accuracy and performance of our approach. The results prove that it performs reasonably well.",
isbn="978-3-030-58923-3"
}
@article{lichtenthalerFormulatingQualityModel2024,
	title = {Formulating a quality model for cloud-native software architectures: conceptual and methodological considerations},
	volume = {27},
	issn = {1573-7543},
	url = {https://doi.org/10.1007/s10586-024-04343-4},
	doi = {10.1007/s10586-024-04343-4},
	abstract = {Interest in cloud computing is steadily increasing and the range of offerings is evolving due to continuous technological innovation. Hence, cloud-native has been established as a term for building applications in a way that maximally exploits benefits of modern cloud computing concepts. However, cloud-native as a topic is broad and the variety in cloud computing technologies is large. Thus, we identify a need in supporting developers and software architects who want to benefit from cloud-native concepts. We provide this support in the form of a quality model for cloud-native software architectures that explains how architectural characteristics impact different quality aspects. Our focus is on the design time and the aim is that architectural models of applications can be evaluated according to cloud-native characteristics and corresponding quality aspects. In this work we present our approach for formulating and validating the quality model for cloud-native software architectures as well as its current state. This presentation is based on previous work, especially a recently conducted validation survey that focused on the impacts of architectural characteristics on quality aspects. The new contribution of this work is the integrated presentation of our approach in a larger context of conceptual and methodological considerations. Further, revision of the quality model based on a repeated literature search for architectural measures is presented. We provide a more detailed look on the quality model, explaining exemplary product factors and their relevance within the topic of cloud-native. Our results provide a qualitative overview of characteristics associated with cloud native software architectures and lay the foundation for quantitative quality evaluations based on architectural models of applications.},
	number = {4},
	journal = {Cluster Computing},
	author = {Lichtenth√§ler, Robin and Wirtz, Guido},
	month = jul,
	year = {2024},
	pages = {4077--4093},
}
@article{khoshnevisSearchbasedIdentificationVariable2022,
	title = {A search-based identification of variable microservices for enterprise {SaaS}},
	volume = {17},
	issn = {2095-2236},
	url = {https://doi.org/10.1007/s11704-022-1390-4},
	doi = {10.1007/s11704-022-1390-4},
	abstract = {Recently, SaaS applications are developed as a composition of microservices that serve diverse tenants having similar but different requirements, and hence, can be developed as variability-intensive microservices. Manual identification of these microservices is difficult, time-consuming, and costly, since, they have to satisfy a set of quality metrics for several SaaS architecture configurations at the same time. In this paper, we tackle the multi-objective optimization problem of identifying variable microservices aiming optimal granularity (new metric proposed), commonality, and data convergence, with a search-based approach employing the MOEA/D algorithm. We empirically and experimentally evaluated the proposed method following the Goal-Question-Metric approach. The results show that the method is promising in identifying fully consistent, highly reusable, variable microservices with an acceptable multi-tenancy degree. Moreover, the identified microservices, although not structurally very similar to those identified by the expert architects, provide design quality measures (granularity, etc.) close to (and even better than) the experts.},
	number = {3},
	journal = {Frontiers of Computer Science},
	author = {Khoshnevis, Sedigheh},
	month = nov,
	year = {2022},
	pages = {173208},
}