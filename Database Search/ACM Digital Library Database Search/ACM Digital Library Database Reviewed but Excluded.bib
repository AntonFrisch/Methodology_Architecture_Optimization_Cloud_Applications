@inproceedings{10.1145/2462326.2462333,
author = {Franceschelli, Davide and Ardagna, Danilo and Ciavotta, Michele and Di Nitto, Elisabetta},
title = {SPACE4CLOUD: a tool for system performance and costevaluation of cloud systems},
year = {2013},
isbn = {9781450320504},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2462326.2462333},
doi = {10.1145/2462326.2462333},
abstract = {Cloud Computing is assuming a relevant role in the world of web applications and web services. Cloud technologies allow to build dynamic systems which are able to adapt their performance to workload fluctuations delegating to the Cloud Provider the intensive tasks of management and maintenance of the cloud infrastructure. Which is the best provider for our application? The application will guarantee the required service level objectives (SLOs)? Those are relevant issues that call for a tool able to carry on cost and performance analysis of the system before its actual development. In designing a software application to be executed in a cloud environment, the most relevant issues to be addressed are determining which cloud provider to use and verifying if the target system will present the required performance levels. The goal of this work is to provide a model-driven approach to performance and cost estimation of cloud and multi-cloud systems. We considered the IaaS (Infrastructure-as-a_Service) and PaaS (Platform-as-a-Service) levels.The modelling of such systems has involved different abstraction levels, starting from the representation of cloud applications and ending with the modelling of the underlying insfrastructure/platform belonging to specific Cloud Providers. An initial prototype supporting our approach is also presented.},
booktitle = {Proceedings of the 2013 International Workshop on Multi-Cloud Applications and Federated Clouds},
pages = {27–34},
numpages = {8},
keywords = {performance prediction, model-driven software development, cloud computing},
location = {Prague, Czech Republic},
series = {MultiCloud '13}
}


@inproceedings{10.1145/3357141.3357599,
author = {Costa, Ana Claudia L. A. I. and Colanzi, Thelma E. and Marcolino, Anderson S. and Barbosa, Ellen F.},
title = {Microservice-oriented Product Line Architecture Design: An Exploratory Study},
year = {2019},
isbn = {9781450376372},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3357141.3357599},
doi = {10.1145/3357141.3357599},
abstract = {Microservice has been successfully employed in software industry [1, 11], as they provide modularization and easy management of small and autonomous services, high availability, scalability and short time-to-market. A recent study on microservices shows that most studies generate specific solutions, which emphasize the need for fundamental research, proposals of reusable practices and works that focus on providing information to ease communication between architects and stakeholders [11] -- software architecture can be a powerful tool for this regard. The definition and documentation of the software product line architecture (PLA) is an important activity, especially for inception and extraction of microservice-oriented PLA, because they involve decisions about how to design customizable microservices, how to arrange the communication between microsservices and APIs, etc. In this work, it is proposed a metamodel for the specification of microsserve-oriented PLA design in order to assist the developer in carrying out such an activity. The proposed metamodel was validated in an exploratory study, in which a new PLA was designed through the instantiation of the proposed metamodel and a product was configured from the designed PLA. Both the metamodel and its instantiation were evaluated in a survey involving software developers. The results indicate that the metamodel addresses the structural needs of microservice-oriented architectures. The main contributions of this work are (i) to assist the software product line developers in the specification and documentation of microservice-oriented PLA design and (ii) the lessons about the industrial practice learned from the surveys that are useful to enhance the proposed metamodel.},
booktitle = {Proceedings of the XIII Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {113–122},
numpages = {10},
location = {Salvador, Brazil},
series = {SBCARS '19}
}

@inproceedings{10.1145/1858263.1858265,
author = {Noorshams, Qais and Martens, Anne and Reussner, Ralf},
title = {Using quality of service bounds for effective multi-objective software architecture optimization},
year = {2010},
isbn = {9781450302395},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1858263.1858265},
doi = {10.1145/1858263.1858265},
abstract = {Quantitative prediction of non-functional properties, such as performance, reliability, and cost, of software architectures supports systematic software engineering. Even though there usually is a rough idea on bounds for quality of service, the exact required values may be unclear and subject to tradeoffs. Designing architectures that exhibit such good tradeoff between multiple quality attributes is hard. Even with a given functional design, many degrees of freedom in the software architecture (e.g. component deployment or server configuration) span a large design space. Automated approaches search the design space with multi-objective meta-heuristics such as evolutionary algorithms. However, as quality prediction for a single architecture is computationally expensive, these approaches are time consuming. In this work, we enhance an automated improvement approach to take into account bounds for quality of service in order to focus the search on interesting regions of the objective space, while still allowing trade-offs after the search. To validate our approach, we applied it to an architecture model of a component-based business information system. We compared the search to an unbounded search by running the optimization 8 times, each investigating around 800 candidates. The approach decreases the time needed to find good solutions in the interesting regions of the objective space by more than 35\% on average.},
booktitle = {Proceedings of the 2nd International Workshop on the Quality of Service-Oriented Software Systems},
articleno = {1},
numpages = {6},
keywords = {optimization, performance, quality attribute prediction, reliability, software architecture},
location = {Oslo, Norway},
series = {QUASOSS '10}
}


@inproceedings{10.1145/1294904.1294911,
author = {Medvidovic, Nenad and Malek, Sam},
title = {Software deployment architecture and quality-of-service in pervasive environments},
year = {2007},
isbn = {9781595937988},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1294904.1294911},
doi = {10.1145/1294904.1294911},
abstract = {Over the past several years we have investigated two problems related to the domain of highly distributed, mobile, resource constrained, embedded, and pervasive environments: software deployment and quality of service (QoS). We have done so with the explicit focus on the role played by software architecture in deployment, and on its relationship to QoS. In the process, we have amassed a body of knowledge and experience, and assembled a suite of solutions for targeting different facets of the interplay among software architecture, deployment, and QoS. At the same time, the area we are addressing has proven to be multi-faceted and very complex, constantly presenting new challenges. In this paper we outline the contours of the problem of QoS in architecture-based deployment, our strategy for addressing it, and the challenges that remain. We view this as an important (and fruitful) area of research.},
booktitle = {International Workshop on Engineering of Software Services for Pervasive Environments: In Conjunction with the 6th ESEC/FSE Joint Meeting},
pages = {47–51},
numpages = {5},
location = {Dubrovnik, Croatia},
series = {ESSPE '07}
}
@inproceedings{10.1145/3442381.3449905,
author = {Yu, Guangba and Chen, Pengfei and Chen, Hongyang and Guan, Zijie and Huang, Zicheng and Jing, Linxiao and Weng, Tianjun and Sun, Xinmeng and Li, Xiaoyun},
title = {MicroRank: End-to-End Latency Issue Localization with Extended Spectrum Analysis in Microservice Environments},
year = {2021},
isbn = {9781450383127},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3442381.3449905},
doi = {10.1145/3442381.3449905},
abstract = {With the advantages of flexible scalability and fast delivery, microservice has become a popular software architecture in the modern IT industry. However, the explosion in the number of service instances and complex dependencies make the troubleshooting extremely challenging in microservice environments. To help understand and troubleshoot a microservice system, the end-to-end tracing technology has been widely applied to capture the execution path of each request. Nevertheless, the tracing data are not fully leveraged by cloud and application providers when conducting latency issue localization in the microservice environment. This paper proposes a novel system, named MicroRank, which analyzes clues provided by normal and abnormal traces to locate root causes of latency issues. Once a latency issue is detected by the Anomaly Detector in MicroRank, the cause localization procedure is triggered. MicroRank first distinguishs which traces are abnormal. Then, MicroRank’s PageRank Scorer module uses the abnormal and normal trace information as its input and differentials the importance of different traces to extended spectrum techniques . Finally, the spectrum techniques can calculate the ranking list based on the weighted spectrum information from PageRank Scorer to locate root causes more effectively. The experimental evaluations on a widely-used open-source system and a production system show that MicroRank achieves excellent results not only in one root cause situation but also in two issues that happen at the same time. Moreover, MicroRank makes 6\% to 22\% improvement in recall in localizing root causes compared to current state-of-the-art methods.},
booktitle = {Proceedings of the Web Conference 2021},
pages = {3087–3098},
numpages = {12},
keywords = {Microservice, PageRank, end-to-end tracing, root cause localization, spectrum analysis},
location = {Ljubljana, Slovenia},
series = {WWW '21}
}
@inproceedings{10.1145/2568088.2568098,
author = {Ewing, John M. and Menasc\'{e}, Daniel A.},
title = {A meta-controller method for improving run-time self-architecting in SOA systems},
year = {2014},
isbn = {9781450327336},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2568088.2568098},
doi = {10.1145/2568088.2568098},
abstract = {This paper builds on SASSY, a system for automatically generating SOA software architectures that optimize a given utility function of multiple QoS metrics. In SASSY, SOA software systems are automatically re-architected when services fail or degrade. Optimizing both architecture and service provider selection presents a pair of nested NP-hard problems. Here we adapt hill-climbing, beam search, simulated annealing, and evolutionary programming to both architecture optimization and service provider selection. Each of these techniques has several parameters that influence their efficiency. We introduce in this paper a meta-controller that automates the run-time selection of heuristic search techniques and their parameters. We examine two different meta-controller implementations that each use online learning. The first implementation identifies the best heuristic search combination from various prepared combinations. The second implementation analyzes the current self-architecting problem (e.g. changes in performance metrics, service degradations/failures) and looks for similar, previously encountered re-architecting problems to find an effective heuristic search combination for the current problem. A large set of experiments demonstrates the effectiveness of the first meta-controller implementation and indicates opportunities for improving the second meta-controller implementation.},
booktitle = {Proceedings of the 5th ACM/SPEC International Conference on Performance Engineering},
pages = {173–184},
numpages = {12},
keywords = {soa, metaheuristics, meta-controlled qos optimization, heuristic search, combinatorial search techniques, autonomic computing, automated run-time software architecting},
location = {Dublin, Ireland},
series = {ICPE '14}
}
@inproceedings{10.1145/2095536.2095601,
author = {Maraoui, Raoudha and Mhamdi, Amel and Graiet, Mohamed and Kmimech, Mourad and Bhiri, Mohamed Tahar and Gaaloul, Walid and Cariou, Eric},
title = {Towards a transformation of composite web service with QoS extension into ACME\Armani},
year = {2011},
isbn = {9781450307840},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2095536.2095601},
doi = {10.1145/2095536.2095601},
abstract = {In this paper, the work developed aims at contributing to the research related to the Quality of Service (QoS) for Web services. The aim of this research is twofold, first, it helps the designers and developers to provide better web services and second, and it helps ensure consistent software architecture as a reference model for many applications. To achieve this, we model, first, the meta-QoS model of the Web services. Then, we formalize the QoS of the Web services by referring to ARMANI. We also, handle the mediation of the composite Web services with the ACME using an automatic MDE approach and implementing a tool for this aim: Web services compositions are transformed onto ACME specifications.},
booktitle = {Proceedings of the 13th International Conference on Information Integration and Web-Based Applications and Services},
pages = {349–352},
numpages = {4},
keywords = {web services composition, transactional web services, formalization, automation, QoS, MDE, ACME/ARMANI},
location = {Ho Chi Minh City, Vietnam},
series = {iiWAS '11}
}

@inproceedings{10.1145/1370888.1370891,
author = {Mikic-Rakic, Marija and Malek, Sam and Medvidovic, Nenad},
title = {Architecture-driven software mobility in support of QoS requirements},
year = {2008},
isbn = {9781605580227},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1370888.1370891},
doi = {10.1145/1370888.1370891},
abstract = {Over the past decade researchers have shown that software architecture provides an appropriate level of granularity for assessing a system's Quality of Service (QoS) properties (e.g., latency). Similarly, many previous works have adopted an architecture-centric approach to reason about the runtime adaptation, including component mobility, of software systems. However, the relationship between software architecture, QoS, and mobility is not clearly understood. In this paper, we present a framework that takes an explicit software architecture perspective for assessing the system's QoS properties, and improving it through architectural mobility. We describe the implementation of the framework, as well as some of the remaining challenges that frame our ongoing work.},
booktitle = {Proceedings of the 1st International Workshop on Software Architectures and Mobility},
pages = {3–8},
numpages = {6},
keywords = {software architecture, qos, mobility},
location = {Leipzig, Germany},
series = {SAM '08}
}
A Case for Microservices Orchestration UsingWorkflowEngines
@inproceedings{10.1145/3123779.3123804,
author = {Haselb\"{o}ck, Stefan and Weinreich, Rainer and Buchgeher, Georg},
title = {Decision guidance models for microservices: service discovery and fault tolerance},
year = {2017},
isbn = {9781450348430},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3123779.3123804},
doi = {10.1145/3123779.3123804},
abstract = {Introducing a microservice system is a challenging task and requires the exploration and documentation of several related areas of design. Exploration and documentation of software architecture design is supported by decision guidance models in software architecture. In this paper, we present such guidance models for several microservice system design areas, including service discovery and fault tolerance. The presented models have been created based on existing microservice literature and have been validated and refined in design workshops with business partners as part of a technical action research (TAR) study.},
booktitle = {Proceedings of the Fifth European Conference on the Engineering of Computer-Based Systems},
articleno = {4},
numpages = {10},
keywords = {decision guidance models, design decisions, microservices, software architecture, technical action research (TAR)},
location = {Larnaca, Cyprus},
series = {ECBS '17}
}
@inproceedings{10.1145/3344948.3344959,
author = {Brandner, Klaus and Weinreich, Rainer},
title = {A recommender system for software architecture decision making},
year = {2019},
isbn = {9781450371421},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3344948.3344959},
doi = {10.1145/3344948.3344959},
abstract = {Making the right design decisions for a software system is a difficult task. Inappropriate design decisions are often hard to reverse and can lead to high costs and a poor quality of the software product. To support architects in the decision-making process, we present a hybrid recommender system for software architecture decision making. The system provides recommendations for areas of system design and for design options within these areas. It uses two kinds of codified architectural knowledge for decision making: decision models for describing potential design options in a design space, and architectural profiles for documenting design decisions in different software systems. The developed recommender system is able to make recommendations early on in the decision-making process and provides more tailored recommendations the more software architecture knowledge is available. The system has been experimentally applied to microservice decision making.},
booktitle = {Proceedings of the 13th European Conference on Software Architecture - Volume 2},
pages = {22–25},
numpages = {4},
keywords = {design decisions, microservices, recommender system, software architecture},
location = {Paris, France},
series = {ECSA '19}
}

@inproceedings{10.1145/3643660.3643942,
author = {Eisenreich, Tobias and Speth, Sandro and Wagner, Stefan},
title = {From Requirements to Architecture: An AI-Based Journey to Semi-Automatically Generate Software Architectures},
year = {2024},
isbn = {9798400705632},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3643660.3643942},
doi = {10.1145/3643660.3643942},
abstract = {Designing domain models and software architectures represents a significant challenge in software development, as the resulting architectures play a vital role in fulfilling the system's quality of service. Due to time pressure, architects often model only one architecture based on their known limited domain understanding, patterns, and experience instead of thoroughly analyzing the domain and evaluating multiple candidates, selecting the best fitting. Existing approaches try to generate domain models based on requirements, but still require time-consuming manual effort to achieve good results. Therefore, in this vision paper, we propose a method to generate software architecture candidates semi-automatically based on requirements using artificial intelligence techniques. We further envision an automatic evaluation and trade-off analysis of the generated architecture candidates using, e.g., the architecture trade-off analysis method combined with large language models and quantitative analyses. To evaluate this approach, we aim to analyze the quality of the generated architecture models and the efficiency and effectiveness of our proposed process by conducting qualitative studies.},
booktitle = {Proceedings of the 1st International Workshop on Designing Software},
pages = {52–55},
numpages = {4},
keywords = {requirements, software architecture, architecture evaluation, LLM},
location = {Lisbon, Portugal},
series = {Designing '24}
}
@inproceedings{10.1145/3622748.3622749,
author = {Oliveira, Manoel Marisergio Alves de and Lima, Rian Carlos Silva and Costa, Marcos Vinicius Lima da and Trindade, Cl\'{a}udio Silva and Queiroz, Paulo Gabriel Gadelha},
title = {SPL integrated with Microservices: a hybrid architectural proposal for multitenant SaaS},
year = {2023},
isbn = {9798400709524},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3622748.3622749},
doi = {10.1145/3622748.3622749},
abstract = {Designing systems to serve a large number of people, who have similar demands, but also have varied needs and generate a huge volume of data, requires a software architecture that allows constant evolution, is easy to maintain, and has the ability to scale smartly. The SPL technique with microservices architecture seems promising to meet these requirements, but this integration is not trivial. Thus, we conduct a SLR that identified 3 architectures that proposed the combination of these techniques. However, the architectures found were complex and reduced time-to-market, as they proposed the implementation of all resources through microservices. Thus, in order to reduce the complexity of development and, consequently, reduce the time to market, this work presents a proposal for the design of a hybrid SPL architecture, through the combination of large backend APIs and microservices. In addition, this research paper presents a case study that consisted of defining the architecture of a medical clinics SPL as a Multi-tenant Software as a Service. Finally, we compare the complexity of the architecture generated using our approach, with a microservice architecture constructed using other approach found in literature.},
booktitle = {Proceedings of the 17th Brazilian Symposium on Software Components, Architectures, and Reuse},
pages = {1–10},
numpages = {10},
keywords = {SaaS Multilocat\'{a}rio, Microsservi\c{c}o, Linha de Produto de Software, Arquitetura de Software},
location = {Campo Grande, Brazil},
series = {SBCARS '23}
}


@inproceedings{10.1145/3671016.3674817,
author = {Chen, Geng and Li, Chenlin and Tyszberowicz, Shmuel and Liu, Zhiming and Liu, Bo},
title = {Mono2MS: Deep Fusion of Multi-Source Features for Partitioning Monolith into Microservices},
year = {2024},
isbn = {9798400707056},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3671016.3674817},
doi = {10.1145/3671016.3674817},
abstract = {Microservice architecture is favoured for its significant scalability, independent evolution, and advantages in performance elasticity. Partitioning a monolith into microservices has become a pivotal issue in software architecture refactoring. Concurrently, assessing the quality of such partitioning also presents a significant challenge. To address this problem, we propose a solution that (1) proposes a method for extracting and representing the multi-source features such as semantics, functionality, and performance of monolithic systems; (2) designs a deep fusion graph clustering model for partitioning a monolith into microservices intelligently; and (3) establishes a comprehensive set of assessment metrics to quantify the quality of the partitioning suggestion. We conducted experiments and analyses on five benchmark projects. By comparing our approach with six other methods, we have demonstrated the advantages of our methodology. Furthermore, ablating different modules has validated the effectiveness of our proposed monolith features analysis and deep fusion graph clustering model.},
booktitle = {Proceedings of the 15th Asia-Pacific Symposium on Internetware},
pages = {259–268},
numpages = {10},
keywords = {deep graph clustering, graph neural network, microservice, monolith partitioning},
location = {Macau, China},
series = {Internetware '24}
}


@inproceedings{10.1145/3171592.3171613,
author = {Bin, Wang and Shulin, Yang and Xuelei, Ren and Guyang, Wang},
title = {Research on Digital Publishing Application System Based on Micro-Service Architecture},
year = {2017},
isbn = {9781450353663},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3171592.3171613},
doi = {10.1145/3171592.3171613},
abstract = {Micro-service architecture technology is an epoch-making technology in the Internet field, providing a good solution for the lack of traditional back-office architecture. This paper analyzes the key technologies of micro service architecture, especially the use of Docker container technology, and introduces micro service architecture technology into digital publishing industry, analyzes some existing problems in traditional digital publishing industry, and then analyzes the micro service architecture Technology in the digital publishing application of the two main aspects, one is the digital publishing system architecture optimization, and second, digital publishing production process improvement. Which provides some reference for the traditional digital publishing field transformation.},
booktitle = {Proceedings of the 2017 VI International Conference on Network, Communication and Computing},
pages = {140–144},
numpages = {5},
keywords = {docker, digital publishing, architecture, Micro-service},
location = {Kunming, China},
series = {ICNCC '17}
}


Software Architecture for Efficiently Designing Cloud Applications using Node.js
@inproceedings{10.1145/2851613.2852014,
author = {Nocera, Francesco},
title = {Fuzzy ontology-driven web-based framework for supporting architectural design: student research abstract},
year = {2016},
isbn = {9781450337397},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2851613.2852014},
doi = {10.1145/2851613.2852014},
abstract = {Since 2005 when Anton Jansen and Jan Bosch [3] gave a modern definition of Software Architecture as a composition of a set of explicit design decisions, a new perspective concerning software architectures design decisions, quality and goals evaluations have been dominating the scientific literature in this field. Designing the software architecture of non-trivial systems belonging to several application domains, namely industrial automation, defense telecommunication, financial services, and so on, is not an easy task, and requires highly skilled and experienced people. Beyond these, new challenges in the design and in architectural models are derived from self-managing and self-adaptive capabilities that are typical of many modern and emerging software systems, including the industrial Internet of Things, cyber-physical systems, cloud computing, and mobile computing. The satisfaction of quality requirements and the appropriate options for future changes are among the major goals of software architectures. In defining and modeling software architecture through patterns, a challenging issue is also concerned with the number of different available decisions depending on the fact that patterns can cooperate, are composable, are complementary or exclusive with respect to a given problem.},
booktitle = {Proceedings of the 31st Annual ACM Symposium on Applied Computing},
pages = {1361–1362},
numpages = {2},
location = {Pisa, Italy},
series = {SAC '16}
}


@inproceedings{10.1145/3589608.3594742,
author = {Meadows, Catherine and Hounsinou, Sena and Wood, Timothy and Bloom, Gedare},
title = {Sidecar-based Path-aware Security for Microservices},
year = {2023},
isbn = {9798400701733},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3589608.3594742},
doi = {10.1145/3589608.3594742},
abstract = {Microservice architectures decompose web applications into loosely-coupled, distributed components that interact with each other to provide an overall service. While this popular software architecture paradigm has many advantages in development and deployment, it also introduces a wider attack surface that is vulnerable to both internal and external attackers. Potentially malicious third-party services or software packages, as well as increased communication endpoints, introduce a wide array of security concerns. To improve the resiliency of microservice-based applications, many of which store sensitive data, we propose a novel, path-based anomaly detection and access control infrastructure that requires no modifications to existing software. We propose leveraging trusted proxies deployed alongside each service for request inspection, anomaly detection and signed token propagation for end-user path validation. Our approach reduces the trusted computing base away from the microservices to a smaller set of components that allow for less trust and a smaller attack surface.},
booktitle = {Proceedings of the 28th ACM Symposium on Access Control Models and Technologies},
pages = {157–162},
numpages = {6},
keywords = {microservice security, node.js, service-oriented architecture},
location = {Trento, Italy},
series = {SACMAT '23}
}


@inproceedings{10.5555/2735522.2735530,
author = {Hamdaqa, Mohammad and Tahvildari, Ladan},
title = {The (5+1) architectural view model for cloud applications},
year = {2014},
publisher = {IBM Corp.},
address = {USA},
abstract = {Existing software architecture frameworks focus on application development, rather than the dynamic evolution of applications at runtime. Their view models reflect design considerations, more than service operations. However, the quality of a cloud application depends on its configuration and the architecture of its service model. For this reason, we need a view model that is constructed around deployment. This paper proposes a (5+1) architectural view model, where each view corresponds to a different perspective on cloud application deployment. The (5+1) view model has been realized as a layered, domain specific modeling language, and the capabilities of this language have been illustrated using a representative domain example. The model was derived by investigating the process of architecting cloud applications, and then providing a set of meta-models to describe cloud applications within their ecosystem.},
booktitle = {Proceedings of 24th Annual International Conference on Computer Science and Software Engineering},
pages = {46–60},
numpages = {15},
location = {Markham, Ontario, Canada},
series = {CASCON '14}
}
@inproceedings{10.1145/3297280.3297400,
author = {Cardarelli, Mario and Iovino, Ludovico and Di Francesco, Paolo and Di Salle, Amleto and Malavolta, Ivano and Lago, Patricia},
title = {An extensible data-driven approach for evaluating the quality of microservice architectures},
year = {2019},
isbn = {9781450359337},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3297280.3297400},
doi = {10.1145/3297280.3297400},
abstract = {Microservice architecture (MSA) is defined as an architectural style where the software system is developed as a suite of small services, each running in its own process and communicating with lightweight mechanisms. The benefits of MSA are many, ranging from an increase in development productivity, to better business-IT alignment, agility, scalability, and technology flexibility. The high degree of microservices distribution and decoupling is, however, imposing a number of relevant challenges from an architectural perspective. In this context, measuring, controlling, and keeping a satisfactory level of quality of the system architecture is of paramount importance.In this paper we propose an approach for the specification, aggregation, and evaluation of software quality attributes for the architecture of microservice-based systems. The proposed approach allows developers to (i) produce architecture models of the system, either manually or automatically via recovering techniques, (ii) contribute to an ecosystem of well-specified and automatically-computable software quality attributes for MSAs, and (iii) continuously measure and evaluate the architecture of their systems by (re-)using the software quality attributes defined in the ecosystem. The approach is implemented by using Model-Driven Engineering techniques.The current implementation of the approach has been validated by assessing the maintainability of a third-party, publicly available benchmark system.},
booktitle = {Proceedings of the 34th ACM/SIGAPP Symposium on Applied Computing},
pages = {1225–1234},
numpages = {10},
keywords = {architecture recovery, microservices, model-driven, software quality},
location = {Limassol, Cyprus},
series = {SAC '19}
}